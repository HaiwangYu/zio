#+title: Notes
#+setupfile: setup.org
#+include: nav.org

* Thread safety

Only recent "draft" sockets (CLIENT/SERVER and RADIO/DISH) are
officially thread safe.  All others should not be relied on to work
properly if used from any thread other than the one in which it was
created.  The ~peer~ relies on Zyre which uses ROUTER/DEALER but they
are kept to the Zyre actor thread.  However the actor PAIR could be
subject to cross-thread use.  A ~node~ creates a ~peer~ when it goes
"online" and destroys it when it goes "offline".  Thus, nodes which
will be used between threads must use only thread-safe sockets and go
online/offline in a common thread and must not use ~peer~ services in
any other thread.

* Socket buffering

Early termination can cause loss of messages that have been sent out a
socket but not yet received by the remote.  The holder of a socket
arrange to keep that socket alive in some manner that assures
transmission.

* A potential Catch 22 with Discovery and Ephemeral Ports

Discovery involves broadcasting headers to the network which advertise
the endpoints a peer has or will bind.  Other peers may receive these
advertisements and then connect based on matching peer name and header
key.

A peer socket may simultaneously bind and connect to multiple
endpoints.  Furthermore a socket may bind to an endpoint specifying an
/ephemeral port/ (eg, ~tcp://127.0.0.1:*~) in which case the full endpoint
address to advertise may only be constructed after the call to ~bind()~
completes.  (Ignored is the case that the IP address is also wildcard
~tcp://*:*~.)

Thus there is an ordering conundrum that disrupts making discovery,
bind and connect be atomic operations if ephemeral ports are allowed.
And, given discovery is meant to reduce the amount of configuration
information needed, it's reasonable that bind endpoints are specified
as ephemeral.

The only reasonable order of operation is then:

1. bind and resolve ephemeral ports
2. advertise binds
3. listen for peer discovery
4. pattern match on their headers and connect

After advertisement (peer initialization) is complete then the final
two steps are asynchronous.  The peer must decide either to wait for
all expected peers to be discovered (and connections made) or to allow
connections to be completed later.  
