.TH "zmq" 3 "Fri Jan 3 2020" "ZIO" \" -*- nroff -*-
.ad l
.nh
.SH NAME
zmq
.SH SYNOPSIS
.br
.PP
.SS "Namespaces"

.in +1c
.ti -1c
.RI " \fBdetail\fP"
.br
.in -1c
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBcontext_t\fP"
.br
.ti -1c
.RI "class \fBerror_t\fP"
.br
.ti -1c
.RI "struct \fBfrom_handle_t\fP"
.br
.ti -1c
.RI "class \fBmessage_t\fP"
.br
.ti -1c
.RI "class \fBmonitor_t\fP"
.br
.ti -1c
.RI "class \fBsocket_ref\fP"
.br
.ti -1c
.RI "class \fBsocket_t\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef zmq_free_fn \fBfree_fn\fP"
.br
.ti -1c
.RI "typedef zmq_pollitem_t \fBpollitem_t\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBpoll\fP (zmq_pollitem_t *items_, size_t nitems_, long timeout_=\-1)"
.br
.ti -1c
.RI "int \fBpoll\fP (zmq_pollitem_t const *items_, size_t nitems_, long timeout_=\-1)"
.br
.ti -1c
.RI "void \fBversion\fP (int *major_, int *minor_, int *patch_)"
.br
.ti -1c
.RI "void \fBswap\fP (\fBmessage_t\fP &a, \fBmessage_t\fP &b) \fBZMQ_NOTHROW\fP"
.br
.ti -1c
.RI "void \fBswap\fP (\fBcontext_t\fP &a, \fBcontext_t\fP &b) \fBZMQ_NOTHROW\fP"
.br
.ti -1c
.RI "bool \fBoperator==\fP (\fBsocket_ref\fP a, \fBsocket_ref\fP b) \fBZMQ_NOTHROW\fP"
.br
.ti -1c
.RI "bool \fBoperator!=\fP (\fBsocket_ref\fP a, \fBsocket_ref\fP b) \fBZMQ_NOTHROW\fP"
.br
.ti -1c
.RI "bool \fBoperator<\fP (\fBsocket_ref\fP a, \fBsocket_ref\fP b) \fBZMQ_NOTHROW\fP"
.br
.ti -1c
.RI "bool \fBoperator>\fP (\fBsocket_ref\fP a, \fBsocket_ref\fP b) \fBZMQ_NOTHROW\fP"
.br
.ti -1c
.RI "bool \fBoperator<=\fP (\fBsocket_ref\fP a, \fBsocket_ref\fP b) \fBZMQ_NOTHROW\fP"
.br
.ti -1c
.RI "bool \fBoperator>=\fP (\fBsocket_ref\fP a, \fBsocket_ref\fP b) \fBZMQ_NOTHROW\fP"
.br
.ti -1c
.RI "void \fBswap\fP (\fBsocket_t\fP &a, \fBsocket_t\fP &b) \fBZMQ_NOTHROW\fP"
.br
.ti -1c
.RI "void \fBproxy\fP (void *frontend, void *backend, void *capture)"
.br
.ti -1c
.RI "void \fBproxy\fP (\fBsocket_ref\fP frontend, \fBsocket_ref\fP backend, \fBsocket_ref\fP capture=\fBsocket_ref\fP())"
.br
.ti -1c
.RI "void \fBproxy_steerable\fP (void *frontend, void *backend, void *capture, void *control)"
.br
.ti -1c
.RI "void \fBproxy_steerable\fP (\fBsocket_ref\fP frontend, \fBsocket_ref\fP backend, \fBsocket_ref\fP capture, \fBsocket_ref\fP control)"
.br
.ti -1c
.RI "std::ostream & \fBoperator<<\fP (std::ostream &os, const \fBmessage_t\fP &msg)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBZMQ_CONSTEXPR_VAR\fP \fBfrom_handle_t\fP \fBfrom_handle\fP = \fBfrom_handle_t\fP(\fBfrom_handle_t::_private\fP())"
.br
.in -1c
.SH "Typedef Documentation"
.PP 
.SS "typedef zmq_free_fn \fBzmq::free_fn\fP"

.PP
Definition at line 234 of file zmq\&.hpp\&.
.SS "typedef zmq_pollitem_t \fBzmq::pollitem_t\fP"

.PP
Definition at line 235 of file zmq\&.hpp\&.
.SH "Function Documentation"
.PP 
.SS "bool zmq::operator!= (\fBsocket_ref\fP a, \fBsocket_ref\fP b)\fC [inline]\fP"

.PP
Definition at line 1496 of file zmq\&.hpp\&.
.SS "bool zmq::operator< (\fBsocket_ref\fP a, \fBsocket_ref\fP b)\fC [inline]\fP"

.PP
Definition at line 1500 of file zmq\&.hpp\&.
.SS "std::ostream& zmq::operator<< (std::ostream & os, const \fBmessage_t\fP & msg)\fC [inline]\fP"

.PP
Definition at line 2097 of file zmq\&.hpp\&.
.SS "bool zmq::operator<= (\fBsocket_ref\fP a, \fBsocket_ref\fP b)\fC [inline]\fP"

.PP
Definition at line 1508 of file zmq\&.hpp\&.
.SS "bool zmq::operator== (\fBsocket_ref\fP a, \fBsocket_ref\fP b)\fC [inline]\fP"

.PP
Definition at line 1492 of file zmq\&.hpp\&.
.SS "bool zmq::operator> (\fBsocket_ref\fP a, \fBsocket_ref\fP b)\fC [inline]\fP"

.PP
Definition at line 1504 of file zmq\&.hpp\&.
.SS "bool zmq::operator>= (\fBsocket_ref\fP a, \fBsocket_ref\fP b)\fC [inline]\fP"

.PP
Definition at line 1512 of file zmq\&.hpp\&.
.SS "int zmq::poll (zmq_pollitem_t * items_, size_t nitems_, long timeout_ = \fC\-1\fP)\fC [inline]\fP"

.PP
Definition at line 248 of file zmq\&.hpp\&.
.SS "int zmq::poll (zmq_pollitem_t const * items_, size_t nitems_, long timeout_ = \fC\-1\fP)\fC [inline]\fP"

.PP
Definition at line 257 of file zmq\&.hpp\&.
.SS "void zmq::proxy (void * frontend, void * backend, void * capture)\fC [inline]\fP"

.PP
Definition at line 1624 of file zmq\&.hpp\&.
.SS "void zmq::proxy (\fBsocket_ref\fP frontend, \fBsocket_ref\fP backend, \fBsocket_ref\fP capture = \fC\fBsocket_ref\fP()\fP)\fC [inline]\fP"

.PP
Definition at line 1632 of file zmq\&.hpp\&.
.SS "void zmq::proxy_steerable (void * frontend, void * backend, void * capture, void * control)\fC [inline]\fP"

.PP
Definition at line 1642 of file zmq\&.hpp\&.
.SS "void zmq::proxy_steerable (\fBsocket_ref\fP frontend, \fBsocket_ref\fP backend, \fBsocket_ref\fP capture, \fBsocket_ref\fP control)\fC [inline]\fP"

.PP
Definition at line 1649 of file zmq\&.hpp\&.
.SS "void zmq::swap (\fBmessage_t\fP & a, \fBmessage_t\fP & b)\fC [inline]\fP"

.PP
Definition at line 613 of file zmq\&.hpp\&.
.SS "void zmq::swap (\fBcontext_t\fP & a, \fBcontext_t\fP & b)\fC [inline]\fP"

.PP
Definition at line 699 of file zmq\&.hpp\&.
.SS "void zmq::swap (\fBsocket_t\fP & a, \fBsocket_t\fP & b)\fC [inline]\fP"

.PP
Definition at line 1619 of file zmq\&.hpp\&.
.SS "void zmq::version (int * major_, int * minor_, int * patch_)\fC [inline]\fP"

.PP
Definition at line 302 of file zmq\&.hpp\&.
.SH "Variable Documentation"
.PP 
.SS "\fBZMQ_CONSTEXPR_VAR\fP \fBfrom_handle_t\fP zmq::from_handle = \fBfrom_handle_t\fP(\fBfrom_handle_t::_private\fP())"

.PP
Definition at line 1458 of file zmq\&.hpp\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for ZIO from the source code\&.
