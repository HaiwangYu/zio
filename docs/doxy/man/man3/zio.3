.TH "zio" 3 "Fri Jan 3 2020" "ZIO" \" -*- nroff -*-
.ad l
.nh
.SH NAME
zio \- implementation of ZIO data flow protocol endpoints  

.SH SYNOPSIS
.br
.PP
.SS "Namespaces"

.in +1c
.ti -1c
.RI " \fBflow\fP"
.br
.RI "ZIO data flow\&. "
.ti -1c
.RI " \fBlevel\fP"
.br
.in -1c
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBCoordHeader\fP"
.br
.ti -1c
.RI "class \fBexception\fP"
.br
.RI "general exception class for zio "
.ti -1c
.RI "struct \fBHeader\fP"
.br
.ti -1c
.RI "class \fBMessage\fP"
.br
.RI "a ZIO message "
.ti -1c
.RI "class \fBmessage_error\fP"
.br
.RI "exception indicating message error "
.ti -1c
.RI "class \fBNode\fP"
.br
.ti -1c
.RI "class \fBOutbox\fP"
.br
.RI "output objects of a fixed native type with levels expressed as methods\&. "
.ti -1c
.RI "class \fBPeer\fP"
.br
.RI "\fBPeer\fP at the network to discover peers and advertise self\&. "
.ti -1c
.RI "struct \fBpeer_info_t\fP"
.br
.ti -1c
.RI "class \fBPort\fP"
.br
.RI "a port holds a socket in the context of a node "
.ti -1c
.RI "struct \fBPrefixHeader\fP"
.br
.ti -1c
.RI "class \fBsocket_error\fP"
.br
.RI "exception indicating a socket error "
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "using \fBjson\fP = nlohmann::json"
.br
.ti -1c
.RI "typedef uint64_t \fBorigin_t\fP"
.br
.ti -1c
.RI "typedef uint64_t \fBgranule_t\fP"
.br
.ti -1c
.RI "typedef uint64_t \fBseqno_t\fP"
.br
.ti -1c
.RI "typedef \fBOutbox\fP< std::string > \fBLogger\fP"
.br
.RI "two special types of outboxes\&. "
.ti -1c
.RI "typedef \fBOutbox\fP< \fBzio::json\fP > \fBMetric\fP"
.br
.RI "Emit structured data\&. "
.ti -1c
.RI "typedef std::string \fBnickname_t\fP"
.br
.RI "A peer asserts a nickname\&. "
.ti -1c
.RI "typedef std::string \fBuuid_t\fP"
.br
.RI "Uniquely identify a peer\&. "
.ti -1c
.RI "typedef std::string \fBheader_key_t\fP"
.br
.RI "A 'header' is on in a set of key/value pairs asserted by a peer\&. "
.ti -1c
.RI "typedef std::string \fBheader_value_t\fP"
.br
.ti -1c
.RI "typedef std::pair< \fBheader_key_t\fP, \fBheader_value_t\fP > \fBheader_t\fP"
.br
.ti -1c
.RI "typedef std::map< \fBheader_key_t\fP, \fBheader_value_t\fP > \fBheaderset_t\fP"
.br
.ti -1c
.RI "typedef std::map< \fBuuid_t\fP, \fBpeer_info_t\fP > \fBpeerset_t\fP"
.br
.ti -1c
.RI "typedef std::shared_ptr< \fBPort\fP > \fBportptr_t\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBsock_type\fP (const \fBsocket_t\fP &sock)"
.br
.RI "Return the ZeroMQ socket type number for the socket\&. "
.ti -1c
.RI "std::string \fBsock_type_name\fP (int stype)"
.br
.in -1c
.SH "Detailed Description"
.PP 
implementation of ZIO data flow protocol endpoints 

Functions to manage message data including send and receiving with a socket\&.
.PP
A zio node is an identified vertex in a ported, directed graph\&.
.PP
Each port is named uniquely within the node and has a ZeroMQ socket which may (simultaneously) bind and connect\&.
.PP
A bind is advertised for discovery\&.
.PP
A connect may be direct which completes immeidately or may be indirect which waits for peer discovery\&.
.PP
Nodes start in 'offline' state\&. During that state, ports may be created\&. The ports also start in 'offline' state and while offline they may bind() or connect()\&. When a node is brought 'online' it brings all ports 'online' and it is then when any bind() or connect() and associated discovery are performed\&. A node and its ports may be taken subsequently 'offline' and the cycle repeated\&.
.PP
A C++ class interface adding peer info caching and a 'wait for
peer to show up' method to ZeroMQ's Zyre\&. 
.SH "Typedef Documentation"
.PP 
.SS "typedef uint64_t \fBzio::granule_t\fP"

.PP
Definition at line 36 of file message\&.hpp\&.
.SS "typedef std::string \fBzio::header_key_t\fP"

.PP
A 'header' is on in a set of key/value pairs asserted by a peer\&. 
.PP
Definition at line 24 of file peer\&.hpp\&.
.SS "typedef std::pair<\fBheader_key_t\fP, \fBheader_value_t\fP> \fBzio::header_t\fP"

.PP
Definition at line 28 of file peer\&.hpp\&.
.SS "typedef std::string \fBzio::header_value_t\fP"

.PP
Definition at line 25 of file peer\&.hpp\&.
.SS "typedef std::map<\fBheader_key_t\fP, \fBheader_value_t\fP> \fBzio::headerset_t\fP"

.PP
Definition at line 29 of file peer\&.hpp\&.
.SS "using \fBzio::json\fP = typedef nlohmann::json"

.PP
Definition at line 10 of file interned\&.hpp\&.
.SS "typedef \fBOutbox\fP<std::string> \fBzio::Logger\fP"

.PP
two special types of outboxes\&. A text based logger to use like print()\&. 
.PP
Definition at line 65 of file outbox\&.hpp\&.
.SS "typedef \fBOutbox\fP<\fBzio::json\fP> \fBzio::Metric\fP"

.PP
Emit structured data\&. 
.PP
Definition at line 68 of file outbox\&.hpp\&.
.SS "typedef std::string \fBzio::nickname_t\fP"

.PP
A peer asserts a nickname\&. 
.PP
Definition at line 19 of file peer\&.hpp\&.
.SS "typedef uint64_t \fBzio::origin_t\fP"

.PP
Definition at line 35 of file message\&.hpp\&.
.SS "typedef std::map<\fBuuid_t\fP, \fBpeer_info_t\fP> \fBzio::peerset_t\fP"

.PP
Definition at line 43 of file peer\&.hpp\&.
.SS "typedef std::shared_ptr<\fBPort\fP> \fBzio::portptr_t\fP"

.PP
Definition at line 110 of file port\&.hpp\&.
.SS "typedef uint64_t \fBzio::seqno_t\fP"

.PP
Definition at line 37 of file message\&.hpp\&.
.SS "typedef std::string \fBzio::uuid_t\fP"

.PP
Uniquely identify a peer\&. 
.PP
Definition at line 21 of file peer\&.hpp\&.
.SH "Function Documentation"
.PP 
.SS "int zio::sock_type (const \fBsocket_t\fP & sock)"

.PP
Return the ZeroMQ socket type number for the socket\&. 
.PP
Definition at line 6 of file interned\&.cpp\&.
.SS "std::string zio::sock_type_name (int stype)"

.PP
Definition at line 11 of file interned\&.cpp\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for ZIO from the source code\&.
