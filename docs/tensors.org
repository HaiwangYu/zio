#+title: ZIO Tensors
#+setupfile: setup.org
#+include: nav.org

* Motivation

In some cases, we want to easily send tensors out of WCT and to a "GPU
service".  We want a fairly simple and general way to do this.

One general way is to produce HDF5 "core" (in-memory) files with
arbitrary HDF5 data.  This gives all the flexible schema of HDF5 but
it also brings in a new dependency.

* Zio ~TENS~ message form

The ZIO ~TENS~ message format is a compromise to provide a subset of
HDF5 schema with not external software dependency.  It requires a JSON
encoded prefix header ~label~ attribute named after the form, ~TENS~.
This attribute is a JSON array of JSON objects.  Each object
represents the metadata of one tensor and the tensor elements are
found in the corresponding payload part.  That is, a message with
$\mathcal{N}$ tensors will have $\mathcal{N}$ elements in the ~TENS~
array and $\mathcal{N}$ payload parts.

The element of the ~TENS~ array is an object with the following attributes

- shape :: a 1D JSON array of integers giving size of each dimension.
- word :: a JSON integer number giving the bytes for the elements of the tensor.

The *shape* and *word size* is then used in serializing and deserializing
the corresponding payload part.  This payload is assumed packed as per
[[https://github.com/rogersce/cnpy][cnpy]].  

Note, ~cnpy~ also characterizes a Numpy array with a "fortran order"
Boolean.  ~TENS~ assumes this is always ~false~.

* Usage

See ~test/test_tens.cpp~ in the ZIO source.

* Possible extension

The ~TENS~ object may be extended in the future to honor

- pointer :: an optional string holding hexadecimal representation of a pointer (see below). 

As a special case, if the *pointer* attribute is provided in the ~TENS~
object, it will be interpreted as a memory address containing the data
that would otherwise be provided in the payload part itself.  The
payload part must still exist but shall be ignored by ~TENS~ form.  It
may be zero size.  This *pointer* can be provided to avoid transfer of
data an obviously only works for messages sent over ~inproc://~
transport and for pointers into memory that is constant over the
lifetime of the usage by the message receiver.


