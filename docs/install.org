#+title: ZIO Installation
#+setupfile: setup.org
#+include: nav.org

* Install ZIO

ZIO installs in the usual [[https://waf.io][Waf]] way.

#+begin_example
  $ ./waf configure --prefix=/path/to/install
  $ ./waf install
#+end_example

To build, these software dependencies will be located via [[https://www.freedesktop.org/wiki/Software/pkg-config/][pkg-config]].

- [[https://github.com/zeromq/libzmq][libzmq]] (with draft sockets built)
- [[https://github.com/zeromq/czmq][CZMQ]]
- [[https://github.com/zeromq/zyre][Zyre]]

In addition, ZIO uses [[https://github.com/zeromq/cppzmq][cppzmq]] and [[https://github.com/nlohmann/json][nlohmann/json]] and includes copies of
these header-only packages.

* Tests

The default install target will compile and execute units tests.  To
avoid running these tests you may add ~--notests~ as:

#+begin_example
  $ ./waf install --notests
#+end_example

Or, to force their running:

#+begin_export 
  $ ./waf --alltests
#+end_export

* Documentation

The generated documentation committed to the repository.  With a
suitable environment (need Emacs and a recent [[https://plantuml.com/][plantuml]]) one can
rebuild it:

#+begin_example
  $ cd docs
  $ make
#+end_example
* Python 

ZIO also provides a Python package.  It installs in "the usual way"
but its dependencies need some more particular care.  It makes use of
PyZMQ, the Python bindings to *libzmq*.  Because ZIO requires ZeroMQ
"draft" sockets, PyZMQ needs to be installed manually in order to
enable them as well as point to an installation of *libzmq* which
includes them.

#+begin_example
  $ python3 -m venv /path/to/venv
  $ source /path/to/venv/bin/activate
  $ cd zio/python
  $ pip install --pre pyzmq \
      --install-option=--enable-drafts \
      --install-option=--zmq=/path/to/zmq
  $ pip install -r requirements.txt
  $ pip install [-e] .
#+end_example

In the above, replace ~/path/to~ with paths suitable for your
environment.  Use ~-e~ option to do in-place development on the ~zio~
Python module.

The ~zio~ Python module has unit tests which can be run as:

#+begin_example
  $ cd zio/python/tests
  $ python -m unittest 
#+end_example
